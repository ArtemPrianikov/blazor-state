trigger:
- master

pr: none

variables:
  Major: 5
  Minor: 0
  Patch: 1
  Beta: "-beta.0" # "-beta.X" or ""
  DotNetSdkVersion: 6.0.200

stages:
  - stage: Test_Stage
    jobs:
      - job:
        pool: 
          name: TimeWarpEnterprises
          workspace:
            clean: all
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Run all the Integration Tests in the repo and gather coverage data with redux dev tools enabled'
            continueOnError: false
            inputs:
              command: fixie
              projects: '**/*.Integration.Tests/*.csproj'
              configuration: 'DefaultReduxEnabled' # the most code coverage when enabled

          - task: DotNetCoreCLI@2
            displayName: 'Run all the Integration Tests in the repo with default options'
            continueOnError: false
            inputs:
              command: fixie
              arguments: '-maxcpucount:1'
              projects: '**/*.Integration.Tests/*.csproj'
              configuration: 'Debug' # We don't gather code coverage here but want to make sure all tests pass.

  - stage: Build_Stage
    variables:
      BuildCounterReset: $(Major).$(Minor).$(Patch)
      BuildCounter: $[counter(variables.BuildCounterReset, 0)]
      Version: '$(Major).$(Minor).$(Patch)-$(BuildCounter)+$(DotNetSdkVersion)'
    jobs:
      - job:
        pool: 
          name: TimeWarpEnterprises
          workspace:
            clean: all
        steps:
          - task: DotNetCoreCLI@2
            displayName: Build BlazorState for Pre release
            inputs:
              command: build
              arguments: '-maxcpucount:1 -p:Version=$(Version)'
              projects: 'Source/BlazorState/BlazorState.csproj'

          - task: PublishBuildArtifacts@1
            displayName: Publish Nuget Artifact
            inputs:
              PathtoPublish: $(System.DefaultWorkingDirectory)/Source/BlazorState/bin/Packages
              ArtifactName: 'NugetPreRelease'
              publishLocation: Container

  - stage: Staging_Stage
    jobs:
      - job:
        pool: 
          name: TimeWarpEnterprises
          workspace:
            clean: all
        steps:
          - script: echo Staging

          - task: DeleteFiles@1
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/PipelineArtifacts/NugetPreRelease'
              Contents: '\*'

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'NugetPreRelease'
              buildType: current
              targetPath: '$(Pipeline.Workspace)/PipelineArtifacts/NugetPreRelease'

          - task: NuGetCommand@2
            displayName: 'Push NuGet to Azure Devops Nuget feed.'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/PipelineArtifacts/NugetPreRelease/*.nupkg'
              nuGetFeedType: internal
              publishVstsFeed: 'dfe61826-f0b9-46b3-a391-23626fc363f2'

  - stage: Production_Stage
    jobs:
      - deployment: 
        pool: 
          name: TimeWarpEnterprises
          workspace:
            clean: all
        environment: Production
        variables:
          Version: '$(Major).$(Minor).$(Patch)$(Beta)+$(DotNetSdkVersion)'
        strategy:
          runOnce:
            deploy:
              steps:                
              - task: DeleteFiles@1
                inputs:
                  SourceFolder: '$(Pipeline.Workspace)/PipelineArtifacts/Nuget'
                  Contents: '\*'
                  
              - task: DotNetCoreCLI@2
                displayName: Build BlazorState release
                inputs:
                  command: build
                  arguments: '-maxcpucount:1 -p:Version=$(Version)'
                  projects: 'Source/BlazorState/BlazorState.csproj'
                  configuration: 'Release'

              - task: PublishBuildArtifacts@1
                displayName: Publish Nuget Artifact
                inputs:
                  PathtoPublish: $(System.DefaultWorkingDirectory)/Source/BlazorState/bin/Packages
                  ArtifactName: Nuget
                  publishLocation: Container

              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: 'Nuget'
                  buildType: current
                  targetPath: '$(Pipeline.Workspace)/PipelineArtifacts/Nuget'

              - task: NuGetCommand@2
                displayName: 'Push NuGet to Nuget.org'
                inputs:
                  command: push
                  packagesToPush: '$(Pipeline.Workspace)/PipelineArtifacts/Nuget/*.nupkg;'
                  nuGetFeedType: external
                  publishFeedCredentials: Nuget.org

              - task: GitHubRelease@1
                displayName: 'GitHub release (create)'
                inputs:
                  gitHubConnection: 'TimeWarp Enterprises GitHub'
                  repositoryName: 'TimeWarpEngineering/blazor-state'
                  action: 'create'
                  target: '$(Build.SourceVersion)'
                  tagSource: 'userSpecifiedTag'
                  tag: 'v$(Version)'
                  releaseNotesSource: 'inline'
                  changeLogCompareToRelease: 'lastFullRelease'
                  changeLogType: 'commitBased'
