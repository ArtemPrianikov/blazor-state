ai-context:
  project:
    name: Blazor-State
    description: A library for managing state in Blazor applications.
    pattern: Mediator Pattern
    conventions:
      - When generating code give the code per file with filename in comment at top of code block. eg. // Filename.cs
  repo_structure:
    - Source
      - BlazorState
        - Base
          - Action
          - ActionHandler
        - Components
          - BlazorStateComponent
        - Features
          - JavaScriptInterop
          - Routing
        - Pipeline
          - ReduxDevTools
        - State
          - State
        - Store
          - Store
        - Subscriptions
  usage_structure:
    - Features
      - FeatureName
        - FeatureState.cs  
          - # Contains the state definition in a partial class
          - Override the Initialize method to set the initial state.
        - FeatureState.Debug.cs  # Optional, for debug-specific code
        - Actions
          - FeatureState.ActionName.cs  
            - # Contains both the Action and Handler as nested classes within a static class named after the Action.
            - # Example: CompleteProcessing.Action and CompleteProcessing.Handler are nested within CompleteProcessing static class.
            - # The file should follow the pattern shown in the example `ProcessingState.CompleteProcessing.cs`.
            - # It should contain a static class named after the Action (e.g., CompleteProcessing).
            - # Within this static class, nest an internal record named 'Action' that inherits from BaseAction.
            - # Also nest an internal class named 'Handler' that inherits from BaseHandler<Action>.
            - # The Handler should override the Handle method to mutate the state.
  documentation:
    - Overview.md
    - Features/Features.md
    - DevOps/DevOps.md
    - Contributing/Overview.md
    - Samples/01-StateActionsHandlers/Readme.md
  scripts:
    powershell:
      - None (Assumption, correct if wrong)
  database:
    type: None (Assumption, correct if wrong)
